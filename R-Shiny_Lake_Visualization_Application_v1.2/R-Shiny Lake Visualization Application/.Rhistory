shiny::runApp('App')
source('App/launch.R')
# Load libraries
suppressWarnings(library(shiny))
suppressWarnings(library(shinyWidgets))
install.packages("shinyWidgets")
# Load libraries
suppressWarnings(library(shiny))
suppressWarnings(library(shinythemes))
install.packages("shinythemes")
install.packages("ggplot2")
source('App/launch.R')
runApp('App')
runApp('App')
c(1:10)
c(1:10)[5]
c(1:10*2)[5]
shiny::runApp('F:/R Code Repository/lake_project_v1.3/App')
# Save app directory
app_dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
data_dir <- file.path(dirname(app_dir), "Data")
guide_dir <- file.path(dirname(app_dir), "Guide")
# Run the application
runApp(
appDir = file.path(app_dir)
)
suppressWarnings(library(data.table))
# Load libraries
suppressWarnings(library(shiny))
suppressWarnings(library(shinyWidgets))
suppressWarnings(library(shinythemes))
suppressWarnings(library(data.table))
suppressWarnings(library(ggplot2))
#suppressWarnings(library(plotly))
#suppressWarnings(library(leaflet))
# Save app directory
app_dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
data_dir <- file.path(dirname(app_dir), "Data")
guide_dir <- file.path(dirname(app_dir), "Guide")
# Run the application
runApp(
appDir = file.path(app_dir)
)
runApp('F:/R Code Repository/lake_project_v1.3/App')
runApp('F:/R Code Repository/lake_project_v1.3/App')
filterdata
filterdata()
ggplot(filterdata(), aes_string(x = "Canopy % Coverage")) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
ggplot(filterdata(), aes_string(x = "SHRUB_PRESENCE")) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
ggplot(filterdata(), aes_string(x = "AG_PCT")) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
ggplot(filterdata(), aes_string(x = "OTHER_PCT")) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
ggplot(filterdata(), aes_string(x = "Canopy_%_Coverage")) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
ggplot(filterdata(), aes_string(x = "Canopy Percent Coverage")) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
alllakes_data[, .(count =.N)]
alllakes_data[`Lake Name`, .(count =.N),.SDcols]
alllakes_data[, .(count =.N),`Lake Name`]
alllakes_data[, .(count =.N), keyby = .(`Lake Name`)]
ggplot(alllakes_data[`Lake Name` == "Papoose Lake"], aes_string(x = "Canopy Percent Coverage")) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
setnames(alllakes_data, old = "Canopy Percent Coverage", new = "CPC")
ggplot(alllakes_data[`Lake Name` == "Papoose Lake"], aes_string(x = "Canopy Percent Coverage")) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
setnames(alllakes_data, old = "Canopy Percent Coverage", new = "CPC")
View(alllakes_data)
setnames(alllakes_data, old = "Canopy % Coverage", new = "CPC")
ggplot(alllakes_data[`Lake Name` == "Papoose Lake"], aes_string(x = "Canopy Percent Coverage")) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
ggplot(alllakes_data[`Lake Name` == "Papoose Lake"], aes_string(x = "CPC")) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
setnames(alllakes_data, old = "CPC", new = "CP C")
ggplot(alllakes_data[`Lake Name` == "Papoose Lake"], aes_string(x = "CP C")) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
setnames(alllakes_data, old = "CP C", new = "C%C")
ggplot(alllakes_data[`Lake Name` == "Papoose Lake"], aes_string(x = "C%C")) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
setnames(alllakes_data, old = "C%C", new = "Canopy_Percent_Cover")
ggplot(alllakes_data[`Lake Name` == "Papoose Lake"], aes_string(x = "Canopy_Percent_Cover")) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
ggplot(alllakes_data[`Lake Name` == "Papoose Lake"], aes_string(x = "Canopy_Percent_Cover")) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
ggplot(alllakes_data[`Lake Name` == "Papoose Lake"], aes_string(x = "Canopy_Percent_Cover")) +
geom_histogram(aes(y=..count..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
test <- zone_measurements
test <- zone_measurements$rbz
test
test <- zone_measurements$rbz
test
"rbz" = c(
"Canopy % Cover","Shrub Presence","Herbaceous Presence",
"Shrub & Herb Coverage","Impervious % Cover",
"Manicured Lawn % Cover","Agriculture % Cover","Other % Cover"
)
test <- zone_measurements$rbz
test
zone_measurements <- list(
"rbz" = c(
"Canopy % Cover","Shrub Presence","Herbaceous Presence",
"Shrub & Herb Coverage","Impervious % Cover",
"Manicured Lawn % Cover","Agriculture % Cover","Other % Cover"
),
"bz" = c(
"VERTICAL_WALL_LEN","RIPRAP_LEN","EROSION_CNTRL_LEN",
"ART_BEACH_LEN","GREAT_ERO_LEN","LESS_ERO_LEN"
),
"lz" = c(
"PIERS_CNT","BOAT_LIFT_CNT","SWIM_RAFT_CNT",
"BOATHOUSE_CNT","MARINAS_CNT","STRUCTURE_OTHER_CNT"
)
)
#Define Variables for each Zone
zone_measurements <- list(
"rbz" = c(
"Canopy % Cover","Shrub Presence","Herbaceous Presence",
"Shrub & Herb Coverage","Impervious % Cover",
"Manicured Lawn % Cover","Agriculture % Cover","Other % Cover"
),
"bz" = c(
"VERTICAL_WALL_LEN","RIPRAP_LEN","EROSION_CNTRL_LEN",
"ART_BEACH_LEN","GREAT_ERO_LEN","LESS_ERO_LEN"
),
"lz" = c(
"PIERS_CNT","BOAT_LIFT_CNT","SWIM_RAFT_CNT",
"BOATHOUSE_CNT","MARINAS_CNT","STRUCTURE_OTHER_CNT"
)
)
#Define Variables for each Zone
zone_measurements <- list(
"rbz" = c(
"Canopy % Cover","Shrub Presence","Herbaceous Presence",
"Shrub & Herb Coverage","Impervious % Cover",
"Manicured Lawn % Cover","Agriculture % Cover","Other % Cover"
),
"bz" = c(
"VERTICAL_WALL_LEN","RIPRAP_LEN","EROSION_CNTRL_LEN",
"ART_BEACH_LEN","GREAT_ERO_LEN","LESS_ERO_LEN"
),
"lz" = c(
"PIERS_CNT","BOAT_LIFT_CNT","SWIM_RAFT_CNT",
"BOATHOUSE_CNT","MARINAS_CNT","STRUCTURE_OTHER_CNT"
)
)
test <- zone_measurements$rbz
test
gsub
install.packages("stringr")
install.packages("stringi")
suppressWarnings(library(stringr))
str_extract(test, "(?<= ).*(?= )")
test
?gsub
gsub(,,test)
gsub(pattern = "[[:space:]]",replacement = "_",test)
gsub(pattern = "[[:punct:][:space:]]",replacement = "_",test)
gsub(pattern = "[[:punct:][:blank:][:space:]]",replacement = "_",test)
name_decoder <- function(old_names){
gsub(
pattern = "[[:punct:][:blank:][:space:]]",
replacement = "_",
old_names
)
}
name_decoder(old_names = test)
name_decoder(test)
source('F:/R Code Repository/lake_project_v1.3/App/launch.R')
runApp('F:/R Code Repository/lake_project_v1.3/App')
ggplot
ggplot2::luv_colours
View(ggplot2::luv_colours)
runApp('F:/R Code Repository/lake_project_v1.3/App')
View(names(alllakes_data))
View(list(names(alllakes_data))
)
list(names(alllakes_data))
mappings_dir <- file.path(dirname(app_dir), "Mappings")
mappings_dir
name_mapping <- fread(file.path(mappings_dir), "NameMapping.csv")
name_mapping <- fread(file.path(mappings_dir, "NameMapping.csv"))
name_mapping <- fread(file.path(mappings_dir, "NameMapping.csv"))
name_mapping
name_mapping
name_mapping <- fread(file.path(mappings_dir, "NameMapping.csv"))
name_mapping
name_mapping$Zone
name_mapping[Zone == "rbz",.(Formatted_Name)]
#Define Variables for each Zone
zone_measurements <- list(
"rbz" = name_mapping[Zone == "rbz",.(Formatted_Name)],
"bz" = name_mapping[Zone == "bz",.(Formatted_Name)],
"lz" = name_mapping[Zone == "lz",.(Formatted_Name)]
)
name_mapping[Zone == "rbz",.(Formatted_Name)],
name_mapping[Zone == "rbz",.(Formatted_Name)
name_mapping[Zone == "rbz",.(Formatted_Name)]
name_mapping[Zone == "rbz",.(Formatted_Name)]
name_mapping[Zone == "bz",.(Formatted_Name)]
name_mapping[Zone == "lz",.(Formatted_Name)]
source('F:/R Code Repository/lake_project_v1.3/App/launch.R')
name_mapping
name_mapping[,.(Code_Name)]
View(name_mapping)
runApp('F:/R Code Repository/lake_project_v1.3/App')
runApp('F:/R Code Repository/lake_project_v1.3/App')
name_mapping
name_mapping$Code_Name
runApp('F:/R Code Repository/lake_project_v1.3/App')
runApp('F:/R Code Repository/lake_project_v1.3/App')
name_mapping[Formatted_Name == "Canopy % Cover",.(Code_Name)]
test<-name_mapping[Formatted_Name == "Canopy % Cover",.(Code_Name)]
str(test)
runApp('F:/R Code Repository/lake_project_v1.3/App')
